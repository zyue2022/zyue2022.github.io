<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LRU算法</title>
    <link href="/2022/07/02/LRU%E7%AE%97%E6%B3%95/"/>
    <url>/2022/07/02/LRU%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>一种按时序来淘汰的缓存淘汰策略！！！</p></blockquote><p>LRU的全称是Least Recently Used，即最近最少使用，我们认为最近使用过的数据是有用的，很久没有使用过的数据是无用的，内存满了就先删除那些很久没有用过的数据。</p><ul><li>显然cache里面的元素要有时序，支持快速查找，支持在任意位置插入和删除元素；</li><li>用节点来表示每一个键值对key-value；</li><li>可以结合双向链表与哈希表，链表里面是节点，哈希表存储key及链表中对应的节点；</li><li>双向链表中靠头部元素是最久未使用的，靠尾部元素是最近使用的；</li><li>添加元素时先查看缓存容量，只能从尾部插入；</li><li>若添加新元素时遇到相同key值，只需更新value值和将链表中节点移动到尾部；</li><li>缓存容量不足时从链表头部删除节点，并且删除umap中对应节点；</li><li>访问某元素后要将该节点位置移动到链表尾部；</li><li>umap中节点的变动只发生在添加新节点和缓存容量不够时；</li><li>注意移除与删除列表中节点的区别；</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> key, value;<br>    Node* prev;<br>    Node* next;<br>    <span class="hljs-comment">//必须添加下面两个构造函数</span><br>    <span class="hljs-built_in">Node</span>() : <span class="hljs-built_in">key</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">value</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">prev</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> v) : <span class="hljs-built_in">key</span>(k), <span class="hljs-built_in">value</span>(v), <span class="hljs-built_in">prev</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NodeList</span> &#123;<br>    Node* head;<br>    Node* tail;<br>    <span class="hljs-built_in">NodeList</span>() &#123;<br>        <span class="hljs-comment">//必须要new</span><br>        head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>();<br>        tail = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>();<br>        head-&gt;next = tail;<br>        tail-&gt;prev = head;<br>    &#125;<br>    <span class="hljs-comment">//添加节点到链表尾部</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addToTail</span><span class="hljs-params">(Node* node)</span> </span>&#123;<br>        node-&gt;prev = tail-&gt;prev;<br>        tail-&gt;prev-&gt;next = node;<br>        node-&gt;next = tail;<br>        tail-&gt;prev = node;<br>    &#125;<br>    <span class="hljs-comment">//从链表中移除某个节点，前提是这个节点必须存在于链表中</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Node* node)</span> </span>&#123;<br>        node-&gt;prev-&gt;next = node-&gt;next;<br>        node-&gt;next-&gt;prev = node-&gt;prev;<br>    &#125;<br>    <span class="hljs-comment">//删除链表中最久未使用的节点，即靠近头部的那个节点</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cleanOneCache</span><span class="hljs-params">()</span> </span>&#123;<br>        Node* tmp = head-&gt;next;<br>        <span class="hljs-type">int</span> key = tmp-&gt;key;<br>        <span class="hljs-built_in">remove</span>(tmp);<br>        <span class="hljs-keyword">delete</span> tmp;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>    <span class="hljs-comment">//使某个被访问的元素到链表尾部</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">makeItRecently</span><span class="hljs-params">(Node* node)</span></span>&#123;<br>        <span class="hljs-built_in">remove</span>(node);<br>        <span class="hljs-built_in">addToTail</span>(node);<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    NodeList list;<br>    unordered_map&lt;<span class="hljs-type">int</span>, Node*&gt; umap;<br>    <span class="hljs-type">int</span> capacity;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LRUCache</span>(<span class="hljs-type">int</span> cap) &#123;<br>        capacity = cap;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(umap.<span class="hljs-built_in">find</span>(key) == umap.<span class="hljs-built_in">end</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Node* node = umap[key];<br>            <span class="hljs-type">int</span> value = node-&gt;value;<br>            <span class="hljs-comment">//更新链表中节点位置</span><br>            list.<span class="hljs-built_in">makeItRecently</span>(node);<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(umap.<span class="hljs-built_in">find</span>(key) != umap.<span class="hljs-built_in">end</span>()) &#123;<br>            Node* cur = umap[key];<br>            <span class="hljs-comment">//更新节点中的value值</span><br>            cur-&gt;value = value;<br>            <span class="hljs-comment">//更新链表中节点位置</span><br>            list.<span class="hljs-built_in">makeItRecently</span>(cur);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//先查看缓存容量是否充足</span><br>            <span class="hljs-keyword">if</span>(capacity == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span>(umap.<span class="hljs-built_in">size</span>() == capacity) &#123;<br>                <span class="hljs-type">int</span> k = list.<span class="hljs-built_in">cleanOneCache</span>();<br>                umap.<span class="hljs-built_in">erase</span>(k);<br>            &#125;<br>            <span class="hljs-comment">//添加新节点到链表和umap中</span><br>            Node* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(key, value);<br>            list.<span class="hljs-built_in">addToTail</span>(node);<br>            umap[key] = node;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2022/07/02/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2022/07/02/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<ul><li>并查集用来表示各节点间的连通关系；</li><li>有些问题可以抽象用并查集来解决；</li><li>节点用数组表示！！！<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind</span> &#123;<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// 连接分量的数目</span><br>    <span class="hljs-type">int</span> count;<br>    <span class="hljs-comment">// 记录每棵树的节点个数</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; size;<br>    <span class="hljs-comment">// 记录每个节点的父节点</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; parent;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">UnionFind</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">count</span>(n) &#123;<br>        parent.<span class="hljs-built_in">resize</span>(n);<br>        size.<span class="hljs-built_in">resize</span>(n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            parent[i] = i;<br>            size[i] = i;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Count</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 找到该节点所在树的根节点</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findRoot</span> <span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (x != parent[x]) &#123;<br>            <span class="hljs-comment">// 路径压缩</span><br>            parent[x] = parent[parent[x]];<br>            x = parent[x];<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 连接两个节点</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unionIt</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> </span>&#123;<br>        <span class="hljs-type">int</span> rootP = <span class="hljs-built_in">findRoot</span>(p);<br>        <span class="hljs-type">int</span> rootQ = <span class="hljs-built_in">findRoot</span>(q);<br>        <span class="hljs-keyword">if</span> (rootP == rootQ) <span class="hljs-keyword">return</span>;<br>        <br>        <span class="hljs-comment">// 小树接在大树之下，更平衡</span><br>        <span class="hljs-keyword">if</span> (size[rootP] &gt;= size[rootQ]) &#123;<br>            parent[rootQ] = rootP;<br>            size[rootP] += size[rootQ];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            parent[rootP] = rootQ;<br>            size[rootQ] += size[rootP];<br>        &#125;<br>        --count;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 确认两个节点是否连接</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> </span>&#123;<br>        <span class="hljs-type">int</span> rootP = <span class="hljs-built_in">findRoot</span>(p);<br>        <span class="hljs-type">int</span> rootQ = <span class="hljs-built_in">findRoot</span>(q);<br>        <span class="hljs-keyword">if</span> (rootP == rootQ) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++后端个人书单</title>
    <link href="/2022/07/01/C++%E5%90%8E%E7%AB%AF%E4%B8%AA%E4%BA%BA%E4%B9%A6%E5%8D%95/"/>
    <url>/2022/07/01/C++%E5%90%8E%E7%AB%AF%E4%B8%AA%E4%BA%BA%E4%B9%A6%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center"><strong>类别</strong></th><th align="center"><strong>书名</strong></th><th align="center"><strong>作者</strong></th></tr></thead><tbody><tr><td align="center"><strong><em>数学基础</em></strong></td><td align="center">程序员的数学2 概率统计</td><td align="center">[日]平冈和幸</td></tr><tr><td align="center"></td><td align="center">程序员的数学3 线性代数</td><td align="center">[日]平冈和幸</td></tr><tr><td align="center"><strong><em>C++</em></strong></td><td align="center">C++ Primer（中文版 第五版）</td><td align="center">[美]Stanley B. Lippman</td></tr><tr><td align="center"></td><td align="center">Effective C++</td><td align="center">[美]Scott Meyers</td></tr><tr><td align="center"></td><td align="center">More Effective C++</td><td align="center">[美]Scott Meyers</td></tr><tr><td align="center"></td><td align="center">Effective Modern C++</td><td align="center">[美]Scott Meyers</td></tr><tr><td align="center"></td><td align="center">STL源码刨析</td><td align="center">侯捷</td></tr><tr><td align="center"></td><td align="center">深度探索C++对象模型</td><td align="center">[美]Stanley B. Lippman</td></tr><tr><td align="center"><strong><em>数据机构与算法</em></strong></td><td align="center">数据机构与算法分析：C++语言描述（第四版）</td><td align="center">[美]Mark Allen Weiss</td></tr><tr><td align="center"></td><td align="center">算法（第4版）</td><td align="center">[美]Robert Sedgewick</td></tr><tr><td align="center"></td><td align="center">编程珠玑 第2版</td><td align="center">[美]Jon,Bentley</td></tr><tr><td align="center"></td><td align="center">剑指Offer 第2版</td><td align="center">何海涛</td></tr><tr><td align="center"></td><td align="center">labuladong的算法小抄</td><td align="center">付东来</td></tr><tr><td align="center"><strong><em>计算机网络</em></strong></td><td align="center">图解TCP&#x2F;IP 第5版</td><td align="center">[日]竹下隆史</td></tr><tr><td align="center"></td><td align="center">图解HTTP</td><td align="center">[日]上野</td></tr><tr><td align="center"></td><td align="center">计算机网络：自顶向下方法</td><td align="center">[美]James F. kurose</td></tr><tr><td align="center"><strong><em>操作系统</em></strong></td><td align="center">操作系统导论</td><td align="center">[美]Remzi · H.Arpaci-Dusseau</td></tr><tr><td align="center"></td><td align="center">程序员的自我修养 ——链接、转载与库</td><td align="center">俞甲子</td></tr><tr><td align="center"></td><td align="center">鸟哥的Linux私房菜基础学习篇（第四版）</td><td align="center">鸟哥</td></tr><tr><td align="center"></td><td align="center">深入理解计算机系统（原书第3版）</td><td align="center">[美]Randal E. Bryant</td></tr><tr><td align="center"><strong><em>数据库</em></strong></td><td align="center">SQL必知必会 第5版</td><td align="center">[美]Ben,Forta</td></tr><tr><td align="center"></td><td align="center">MySQL是怎样运行的</td><td align="center">小孩子4919</td></tr><tr><td align="center"></td><td align="center">高性能MySQL（第3版）</td><td align="center">Baron Schwartz</td></tr><tr><td align="center"></td><td align="center">MySQL技术内幕：lnnoDB存储引擎（第2版）</td><td align="center">姜承尧</td></tr><tr><td align="center"></td><td align="center">Redis设计与实现</td><td align="center">黄健宏</td></tr><tr><td align="center"><strong><em>设计模式</em></strong></td><td align="center">大话设计模式</td><td align="center">程杰</td></tr><tr><td align="center"><strong><em>网络编程</em></strong></td><td align="center">Linux高性能服务器编程</td><td align="center">游双</td></tr><tr><td align="center"></td><td align="center">linux多线程服务端编程</td><td align="center">陈硕</td></tr><tr><td align="center"><strong><em>应用</em></strong></td><td align="center">数据密集型应用系统设计</td><td align="center">[美]Martin Kleppmann</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>计算机学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习路线</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo常用命令</title>
    <link href="/2022/07/01/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/07/01/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="前置安装"><a href="#前置安装" class="headerlink" title="前置安装"></a>前置安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -g hexo-cli<br><br>npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建一个名为new_post的post</span><br>hexo n new_post<br><br><span class="hljs-comment"># 清楚缓存</span><br>hexo clear<br><br><span class="hljs-comment"># 生成</span><br>hexo g<br><br><span class="hljs-comment"># 发布到本地</span><br>hexo s<br><br><span class="hljs-comment"># 发布到github</span><br>hexo d<br></code></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本地发布</span><br>hexo clear &amp;&amp; hexo g &amp;&amp; hexo s<br><br><span class="hljs-comment"># github发布</span><br>hexo clear &amp;&amp; hexo g &amp;&amp; hexo d<br><br><span class="hljs-comment"># 删除文章</span><br>删除 <span class="hljs-string">&quot;sourc/_posts&quot;</span> 文件夹中相应的md文件<br></code></pre></td></tr></table></figure><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>格式举例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">C++给常用数据结构传入排序算法</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-07-01 16:22:30</span><br><span class="hljs-attr">tags:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">刷题</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">C++</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">C++</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/post_img/02.jpg</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++给常用数据结构传入排序算法</title>
    <link href="/2022/07/01/C++%E7%BB%99%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BC%A0%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2022/07/01/C++%E7%BB%99%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BC%A0%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>在刷<a href="https://leetcode-cn.com/problems/top-k-frequent-elements/">leetcode347题</a>时，遇到c++自定义操作的知识点，总结如下：</p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p><strong>在类中</strong>定义了如下比较函数，但<strong>定义有序容器时</strong>编译不通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">myComparison</span><span class="hljs-params">(<span class="hljs-type">const</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&amp; lhs, <span class="hljs-type">const</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&amp; rhs)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> lhs.second &gt; rhs.second;<br>&#125;<br><br>priority_queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;,<br>  <span class="hljs-keyword">decltype</span>(myComparison)*&gt; <span class="hljs-built_in">pri_que</span>(myComparison);<br></code></pre></td></tr></table></figure><p>编译报错如下：</p><blockquote><p>error: reference to non-static member function must be called 即必须调用对非静态成员函数的引用</p></blockquote><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p>所以比较函数定义错误，正确解法如下：</p><h4 id="1-定义为静态成员函数"><a href="#1-定义为静态成员函数" class="headerlink" title="1.定义为静态成员函数"></a>1.定义为静态成员函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">myComparison</span><span class="hljs-params">(<span class="hljs-type">const</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&amp; lhs, <span class="hljs-type">const</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&amp; rhs)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> lhs.second &gt; rhs.second;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-将比较函数定义在类外面"><a href="#2-将比较函数定义在类外面" class="headerlink" title="2.将比较函数定义在类外面"></a>2.将比较函数定义在类外面</h4><p>注意函数声明在类前。</p><h4 id="3-运用仿函数"><a href="#3-运用仿函数" class="headerlink" title="3.运用仿函数"></a>3.运用仿函数</h4><p>注意添加const。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">myComparison</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&amp; lhs, <span class="hljs-type">const</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&amp; rhs)</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> lhs.second &gt; rhs.second;<br>&#125;<br>&#125;;<br><br>priority_queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;, myComparison&gt; pri_que;<br></code></pre></td></tr></table></figure><hr><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><h4 id="1-容器的操作自定义处"><a href="#1-容器的操作自定义处" class="headerlink" title="1.容器的操作自定义处"></a>1.容器的操作自定义处</h4><blockquote><p>priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, decltype(myComparison)*&gt; pri_que(myComparison);</p></blockquote><ul><li>为了使用自己定义的操作，在定义容器时必须提供两个类型：<strong>关键字类型</strong>即<code>pair&lt;int, int&gt;</code>，<strong>比较操作类型</strong>即指向myComparison的指针<code>decltype(myComparison)*</code>；</li><li>此处使用<code>decltype</code>指出自定义操作的类型，但当使用decltype来获取一个函数指针类型时，须加上一个<code>*</code>号来表示使用一个给定函数类型的指针；</li><li>定义有序容器时，<code>vector&lt;pair&lt;int, int&gt;&gt;</code>表示<strong>基于vector构造</strong>优先队列；</li><li><code>pri_que(myComparison)</code>表示用myComparison来初始化pri_que对象，即向pri_que添加元素时，调用myComparison来排序；</li><li>用<code>pri_que(myComparison)</code>代替<code>pri_que(&amp;myComparison)</code>因为使用函数名字会自动转化为指针；</li></ul><h4 id="2-比较函数自定义处"><a href="#2-比较函数自定义处" class="headerlink" title="2.比较函数自定义处"></a>2.比较函数自定义处</h4><blockquote><p>return lhs.second &gt; rhs.second;</p></blockquote><ul><li><code>&gt;</code>此比较符号表示在优先队列中左大于右就会建立小顶堆；</li></ul><h3 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h3><h4 id="1-向算法传递函数"><a href="#1-向算法传递函数" class="headerlink" title="1.向算法传递函数"></a>1.向算法传递函数</h4><p>即使用标准库的算法时，传入参数使用自己的操作，示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isShorter</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; s1, <span class="hljs-type">const</span> string&amp; s2)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> s1.<span class="hljs-built_in">size</span>() &lt; s2.<span class="hljs-built_in">size</span>();<br>&#125;<br><span class="hljs-built_in">sort</span>(words.<span class="hljs-built_in">begin</span>(), words.<span class="hljs-built_in">end</span>(), isShorter);<br></code></pre></td></tr></table></figure><h4 id="2-在算法中使用lambda表达式"><a href="#2-在算法中使用lambda表达式" class="headerlink" title="2.在算法中使用lambda表达式"></a>2.在算法中使用lambda表达式</h4><p>即编写与isShorter函数功能相同的lambda表达式，示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(words.<span class="hljs-built_in">begin</span>(), words.<span class="hljs-built_in">end</span>(),<br>    [](<span class="hljs-type">const</span> string&amp; s1, <span class="hljs-type">const</span> string&amp; s2)<br>     &#123;<span class="hljs-keyword">return</span> s1.<span class="hljs-built_in">size</span>() &lt; s2.<span class="hljs-built_in">size</span>();&#125;);<br></code></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://programmercarl.com/">代码随想录</a>博客</li><li>《C++primer》</li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
